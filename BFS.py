{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPOgPCraknmqcLv4gowQS+P"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PaqcJmB0Ams0","executionInfo":{"status":"ok","timestamp":1741844325501,"user_tz":-420,"elapsed":24,"user":{"displayName":"JACK minss","userId":"15250300980242217565"}},"outputId":"e6227d8f-0b1f-4e7f-d00a-d46d1c4b6456"},"outputs":[{"output_type":"stream","name":"stdout","text":["Following is Breadth First Traversal: \n","0 1 2 3 "]}],"source":["# BFS algorithm in Python\n","\n","import collections\n","\n","# BFS algorithm\n","def bfs(graph, root):\n","    visited, queue = set(), collections.deque([root])\n","    visited.add(root)\n","\n","    while queue:\n","        # Dequeue a vertex from queue\n","        vertex = queue.popleft()\n","        print(str(vertex) + \" \", end=\"\")\n","\n","        # If not visited, mark it as visited, and enqueue it\n","        for neighbour in graph[vertex]:\n","            if neighbour not in visited:\n","                visited.add(neighbour)\n","                queue.append(neighbour)\n","\n","if __name__ == \"__main__\":\n","    graph = {0: [1, 2], 1: [2], 2: [3], 3: [1, 2]}\n","    print(\"Following is Breadth First Traversal: \")\n","    bfs(graph, 0)\n"]}]}